{"version":3,"file":"popover.component.d.ts","sources":["popover.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, TemplateRef, OnInit, ViewContainerRef, AfterViewInit } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { SatPopoverScrollStrategy, SatPopoverHorizontalAlign, SatPopoverVerticalAlign, SatPopoverOpenOptions } from './types';\nimport { SatPopoverAnchoringService } from './popover-anchoring.service';\nexport declare class SatPopoverAnchor implements AfterViewInit {\n    elementRef: ElementRef;\n    viewContainerRef: ViewContainerRef;\n    popover: SatPopover;\n    constructor(elementRef: ElementRef, viewContainerRef: ViewContainerRef);\n    ngAfterViewInit(): void;\n}\nexport declare class SatPopover implements OnInit {\n    private _focusTrapFactory;\n    private _viewContainerRef;\n    private _document;\n    /** Anchor element. */\n    anchor: SatPopoverAnchor | ElementRef<HTMLElement> | HTMLElement;\n    private _anchor;\n    /** Alignment of the popover on the horizontal axis. */\n    horizontalAlign: SatPopoverHorizontalAlign;\n    private _horizontalAlign;\n    /** Alignment of the popover on the x axis. Alias for `horizontalAlign`. */\n    xAlign: SatPopoverHorizontalAlign;\n    /** Alignment of the popover on the vertical axis. */\n    verticalAlign: SatPopoverVerticalAlign;\n    private _verticalAlign;\n    /** Alignment of the popover on the y axis. Alias for `verticalAlign`. */\n    yAlign: SatPopoverVerticalAlign;\n    /** Whether the popover always opens with the specified alignment. */\n    forceAlignment: boolean;\n    private _forceAlignment;\n    /**\n     * Whether the popover's alignment is locked after opening. This prevents the popover\n     * from changing its alignement when scrolling or changing the size of the viewport.\n     */\n    lockAlignment: boolean;\n    private _lockAlignment;\n    /** Whether the first focusable element should be focused on open. */\n    autoFocus: boolean;\n    private _autoFocus;\n    _autoFocusOverride: boolean;\n    /** Whether the popover should return focus to the previously focused element after closing. */\n    restoreFocus: boolean;\n    private _restoreFocus;\n    _restoreFocusOverride: boolean;\n    /** How the popover should handle scrolling. */\n    scrollStrategy: SatPopoverScrollStrategy;\n    private _scrollStrategy;\n    /** Whether the popover should have a backdrop (includes closing on click). */\n    hasBackdrop: boolean;\n    private _hasBackdrop;\n    /** Whether the popover should close when the user clicks the backdrop or presses ESC. */\n    interactiveClose: boolean;\n    private _interactiveClose;\n    /** Custom transition to use while opening. */\n    openTransition: string;\n    private _openTransition;\n    /** Custom transition to use while closing. */\n    closeTransition: string;\n    private _closeTransition;\n    /** Optional backdrop class. */\n    backdropClass: string;\n    /** Emits when the popover is opened. */\n    opened: EventEmitter<void>;\n    /** Emits when the popover is closed. */\n    closed: EventEmitter<any>;\n    /** Emits when the popover has finished opening. */\n    afterOpen: EventEmitter<void>;\n    /** Emits when the popover has finished closing. */\n    afterClose: EventEmitter<void>;\n    /** Emits when the backdrop is clicked. */\n    backdropClicked: EventEmitter<void>;\n    /** Emits when a keydown event is targeted to this popover's overlay. */\n    overlayKeydown: EventEmitter<KeyboardEvent>;\n    /** Reference to template so it can be placed within a portal. */\n    _templateRef: TemplateRef<any>;\n    /** Classes to be added to the popover for setting the correct transform origin. */\n    _classList: any;\n    /** Whether the popover is presently open. */\n    _open: boolean;\n    /** Reference to the element to build a focus trap around. */\n    private _focusTrapElement;\n    /** Reference to the element that was focused before opening. */\n    private _previouslyFocusedElement;\n    /** Reference to a focus trap around the popover. */\n    private _focusTrap;\n    constructor(_focusTrapFactory: FocusTrapFactory, _anchoringService: SatPopoverAnchoringService, _viewContainerRef: ViewContainerRef, _document: any);\n    ngOnInit(): void;\n    /** Open this popover. */\n    open(options?: SatPopoverOpenOptions): void;\n    /** Close this popover. */\n    close(value?: any): void;\n    /** Toggle this popover open or closed. */\n    toggle(): void;\n    /** Realign the popover to the anchor. */\n    realign(): void;\n    /** Gets whether the popover is presently open. */\n    isOpen(): boolean;\n    /** Allows programmatically setting a custom anchor. */\n    setCustomAnchor(viewContainer: ViewContainerRef, el: ElementRef<HTMLElement> | HTMLElement): void;\n    /** Gets an animation config with customized (or default) transition values. */\n    _getAnimation(): {\n        value: any;\n        params: any;\n    };\n    /** Callback for when the popover is finished animating in or out. */\n    _onAnimationDone(event: AnimationEvent): void;\n    /** Apply alignment classes based on alignment inputs. */\n    _setAlignmentClasses(horizAlign?: SatPopoverHorizontalAlign, vertAlign?: SatPopoverVerticalAlign): void;\n    /** Move the focus inside the focus trap and remember where to return later. */\n    private _trapFocus;\n    /** Restore focus to the element focused before the popover opened. Also destroy trap. */\n    private _restoreFocusAndDestroyTrap;\n    /** Save a reference to the element focused before the popover was opened. */\n    private _savePreviouslyFocusedElement;\n    /** Throws an error if the alignment is not a valid horizontalAlign. */\n    private _validateHorizontalAlign;\n    /** Throws an error if the alignment is not a valid verticalAlign. */\n    private _validateVerticalAlign;\n    /** Throws an error if the scroll strategy is not a valid strategy. */\n    private _validateScrollStrategy;\n}\n"]}